/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.8.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class CaptchaClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://byons.tpddns.cn:62407";
    }

    /**
     * 获取图形验证码
     */
    imageCaptcha(  cancelToken?: CancelToken | undefined): Promise<ImageCaptcha> {
        let url_ = this.baseUrl + "/api/Captcha/iamge";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processImageCaptcha(_response);
        });
    }

    protected processImageCaptcha(response: AxiosResponse): Promise<ImageCaptcha> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ImageCaptcha.fromJS(resultData200);
            return Promise.resolve<ImageCaptcha>(result200);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ImageCaptcha>(<any>null);
    }

    /**
     * 验证图形验证码
     */
    imageCaptchaVerification(model: Captcha , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Captcha/verification/image";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processImageCaptchaVerification(_response);
        });
    }

    protected processImageCaptchaVerification(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Promise.resolve<boolean>(result200);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class LiveClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://byons.tpddns.cn:62407";
    }

    /**
     * 获取当前所有的直播
     * @return 所有直播间的列表，可能为空
     */
    all(  cancelToken?: CancelToken | undefined): Promise<Studio[]> {
        let url_ = this.baseUrl + "/api/Live";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAll(_response);
        });
    }

    protected processAll(response: AxiosResponse): Promise<Studio[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Studio.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Studio[]>(result200);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Studio[]>(<any>null);
    }

    /**
     * 获取指定用户的直播信息
     * @param name 用户的Id或名称
     * @return 用户信息，如果没有找到，则返回401
     */
    get(name: string | null , cancelToken?: CancelToken | undefined): Promise<Studio> {
        let url_ = this.baseUrl + "/api/Live/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<Studio> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Studio.fromJS(resultData200);
            return Promise.resolve<Studio>(result200);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Studio>(<any>null);
    }

    /**
     * 用于Nginx通知服务有新的推流
     * @param addr (optional) 
     * @param app (optional) 
     * @param name (optional) 
     * @param txSecret (optional) 
     * @param txTime (optional) 
     */
    nginxRtmpPush(addr: string | null | undefined, app: string | null | undefined, name: string | null | undefined, txSecret: string | null | undefined, txTime: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Live/nginx/push";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (addr !== null && addr !== undefined)
            content_.append("addr", addr.toString());
        if (app !== null && app !== undefined)
            content_.append("app", app.toString());
        if (name !== null && name !== undefined)
            content_.append("name", name.toString());
        if (txSecret !== null && txSecret !== undefined)
            content_.append("txSecret", txSecret.toString());
        if (txTime !== null && txTime !== undefined)
            content_.append("txTime", txTime.toString());

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processNginxRtmpPush(_response);
        });
    }

    protected processNginxRtmpPush(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 用户Nginx通知服务流已断开
     * @param addr (optional) 
     * @param app (optional) 
     * @param name (optional) 
     * @param txSecret (optional) 
     * @param txTime (optional) 
     */
    nginxRtmpPushDone(addr: string | null | undefined, app: string | null | undefined, name: string | null | undefined, txSecret: string | null | undefined, txTime: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Live/nginx/push_done";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (addr !== null && addr !== undefined)
            content_.append("addr", addr.toString());
        if (app !== null && app !== undefined)
            content_.append("app", app.toString());
        if (name !== null && name !== undefined)
            content_.append("name", name.toString());
        if (txSecret !== null && txSecret !== undefined)
            content_.append("txSecret", txSecret.toString());
        if (txTime !== null && txTime !== undefined)
            content_.append("txTime", txTime.toString());

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processNginxRtmpPushDone(_response);
        });
    }

    protected processNginxRtmpPushDone(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    tencentStreamPush(model: TencentLiveStream , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Live/tencentStreamPush";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTencentStreamPush(_response);
        });
    }

    protected processTencentStreamPush(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    tencentStreamPushDone(model: TencentLiveStream , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Live/tencentStreamPushDone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTencentStreamPushDone(_response);
        });
    }

    protected processTencentStreamPushDone(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 获取推流地址
     * @param id (optional) 要推流的用户
     */
    pushAddress(id: number | undefined , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Live/address/push?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPushAddress(_response);
        });
    }

    protected processPushAddress(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Promise.resolve<string>(result200);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class UserClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://byons.tpddns.cn:62407";
    }

    /**
     * 注册并登录
     * @param model 注册请求模型
     * @return token
     */
    signup(model: Signup , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/User/signup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignup(_response);
        });
    }

    protected processSignup(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Promise.resolve<string>(result200);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * 登录
     * @return token
     */
    login(model: Login , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/User/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Promise.resolve<string>(result200);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * 刷新token
     * @param id (optional) 
     * @return 新的token
     */
    refreshToken(id: number | undefined , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/User/token?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRefreshToken(_response);
        });
    }

    protected processRefreshToken(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Promise.resolve<string>(result200);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * 获取用户信息
     * @param id (optional) 
     * @return 用户信息
     */
    get(id: number | undefined , cancelToken?: CancelToken | undefined): Promise<UserDTO> {
        let url_ = this.baseUrl + "/api/User?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<UserDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserDTO.fromJS(resultData200);
            return Promise.resolve<UserDTO>(result200);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDTO>(<any>null);
    }

    /**
     * 验证用户名是否可用
     * @param name (optional) 
     */
    validName(name: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/User/valid-name?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidName(_response);
        });
    }

    protected processValidName(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Promise.resolve<boolean>(result200);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * 验证邮箱是否可用
     * @param email (optional) 
     */
    validEmail(email: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/User/valid-email?";
        if (email !== undefined && email !== null)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidEmail(_response);
        });
    }

    protected processValidEmail(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Promise.resolve<boolean>(result200);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * 向未注册的邮箱发送验证码
     * @param email (optional) 
     */
    sendGuestEmailAuthCode(email: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/User/guest-email-auth-code?";
        if (email !== undefined && email !== null)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSendGuestEmailAuthCode(_response);
        });
    }

    protected processSendGuestEmailAuthCode(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 向用户的邮箱发送验证码。
     * @param id (optional) 
     */
    sendUserEmailAuthCode(id: number | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/User/user-email-auth-code?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSendUserEmailAuthCode(_response);
        });
    }

    protected processSendUserEmailAuthCode(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 用户核心信息更改
     * @param id (optional) 
     */
    userCoreAlteration(id: number | undefined, model: UserCore , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/User/core-alteration?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUserCoreAlteration(_response);
        });
    }

    protected processUserCoreAlteration(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * 用户信息更改
     * @param id (optional) 
     */
    userAlteration(id: number | undefined, model: UserDTO , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/User/alteration?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUserAlteration(_response);
        });
    }

    protected processUserAlteration(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    updateUserImage(id: number | undefined, suffix: string | null | undefined, imageFile: FileParameter | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/User/userImage?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (suffix !== undefined && suffix !== null)
            url_ += "suffix=" + encodeURIComponent("" + suffix) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (imageFile !== null && imageFile !== undefined)
            content_.append("imageFile", imageFile.data, imageFile.fileName ? imageFile.fileName : "imageFile");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUserImage(_response);
        });
    }

    protected processUpdateUserImage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = InvalidModelDescription.fromJS(resultData400);
            return throwException("\u8bf7\u6c42\u7684\u53c2\u6570\u65e0\u6548\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result400);
        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = InternalErrorDescription.fromJS(resultData500);
            return throwException("\u670d\u52a1\u5668\u5185\u90e8\u53d1\u751f\u9519\u8bef\u65f6\u8fd4\u56de\u6b64\u6a21\u578b\u3002", status, _responseText, _headers, result500);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

/** 用于客户端请求图形验证码的响应模型 */
export class ImageCaptcha implements IImageCaptcha {
    /** 唯一标识 */
    key?: string | undefined;
    image?: string;

    constructor(data?: IImageCaptcha) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.image = _data["image"];
        }
    }

    static fromJS(data: any): ImageCaptcha {
        data = typeof data === 'object' ? data : {};
        let result = new ImageCaptcha();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["image"] = this.image;
        return data; 
    }
}

/** 用于客户端请求图形验证码的响应模型 */
export interface IImageCaptcha {
    /** 唯一标识 */
    key?: string | undefined;
    image?: string;
}

/** 用于验证码服务提交或获取的模型 */
export class Captcha implements ICaptcha {
    /** 验证码的Key，对于图形验证码，该值是验证码位于服务器的索引；对于邮箱验证码，该值为被验证的邮箱账号 */
    key!: string;
    /** 从邮箱或者图形中人为获取到的验证码，该码应该与Key一起提交以供服务器验证 */
    code!: string;

    constructor(data?: ICaptcha) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): Captcha {
        data = typeof data === 'object' ? data : {};
        let result = new Captcha();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["code"] = this.code;
        return data; 
    }
}

/** 用于验证码服务提交或获取的模型 */
export interface ICaptcha {
    /** 验证码的Key，对于图形验证码，该值是验证码位于服务器的索引；对于邮箱验证码，该值为被验证的邮箱账号 */
    key: string;
    /** 从邮箱或者图形中人为获取到的验证码，该码应该与Key一起提交以供服务器验证 */
    code: string;
}

/** 用于描述直播间信息的模型 */
export class Studio implements IStudio {
    /** 直播间ID，同时也是UP的ID */
    id?: number;
    /** UP主 */
    director?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** Flv播放地址 */
    flvAddress?: string | undefined;
    /** Hls播放地址 */
    hlsAddress?: string | undefined;

    constructor(data?: IStudio) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.director = _data["director"];
            this.name = _data["name"];
            this.flvAddress = _data["flvAddress"];
            this.hlsAddress = _data["hlsAddress"];
        }
    }

    static fromJS(data: any): Studio {
        data = typeof data === 'object' ? data : {};
        let result = new Studio();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["director"] = this.director;
        data["name"] = this.name;
        data["flvAddress"] = this.flvAddress;
        data["hlsAddress"] = this.hlsAddress;
        return data; 
    }
}

/** 用于描述直播间信息的模型 */
export interface IStudio {
    /** 直播间ID，同时也是UP的ID */
    id?: number;
    /** UP主 */
    director?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** Flv播放地址 */
    flvAddress?: string | undefined;
    /** Hls播放地址 */
    hlsAddress?: string | undefined;
}

export class TencentLiveStream implements ITencentLiveStream {
    app?: string | undefined;
    stream_id?: string | undefined;
    stream_param?: string | undefined;

    constructor(data?: ITencentLiveStream) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.app = _data["app"];
            this.stream_id = _data["stream_id"];
            this.stream_param = _data["stream_param"];
        }
    }

    static fromJS(data: any): TencentLiveStream {
        data = typeof data === 'object' ? data : {};
        let result = new TencentLiveStream();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["app"] = this.app;
        data["stream_id"] = this.stream_id;
        data["stream_param"] = this.stream_param;
        return data; 
    }
}

export interface ITencentLiveStream {
    app?: string | undefined;
    stream_id?: string | undefined;
    stream_param?: string | undefined;
}

/** 用于客户端注册请求的模型 */
export class Signup implements ISignup {
    /** 用户名，该用户名必须未被注册 */
    name!: string;
    /** 邮箱，该邮箱必须未被注册 */
    email!: string;
    /** 邮箱验证码 */
    emailAuthCode!: string;
    /** 用户密码 */
    password!: string;

    constructor(data?: ISignup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.emailAuthCode = _data["emailAuthCode"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): Signup {
        data = typeof data === 'object' ? data : {};
        let result = new Signup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["emailAuthCode"] = this.emailAuthCode;
        data["password"] = this.password;
        return data; 
    }
}

/** 用于客户端注册请求的模型 */
export interface ISignup {
    /** 用户名，该用户名必须未被注册 */
    name: string;
    /** 邮箱，该邮箱必须未被注册 */
    email: string;
    /** 邮箱验证码 */
    emailAuthCode: string;
    /** 用户密码 */
    password: string;
}

/** 用于用户登录的请求模型 */
export class Login implements ILogin {
    /** 用户名、用户ID、Email */
    name!: string;
    /** 用户密码 */
    password!: string;

    constructor(data?: ILogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): Login {
        data = typeof data === 'object' ? data : {};
        let result = new Login();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["password"] = this.password;
        return data; 
    }
}

/** 用于用户登录的请求模型 */
export interface ILogin {
    /** 用户名、用户ID、Email */
    name: string;
    /** 用户密码 */
    password: string;
}

/** 用户信息 */
export class UserDTO implements IUserDTO {
    /** ID */
    id?: number;
    /** 用户邮箱 */
    email?: string | undefined;
    /** 用户名 */
    name?: string | undefined;
    image?: string;
    /** 用户最后一次直播的时间 */
    lastLive?: Date | undefined;
    /** 直播间名称 */
    tvName?: string | undefined;
    /** 直播间封面 */
    tvImage?: string | undefined;

    constructor(data?: IUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.name = _data["name"];
            this.image = _data["image"];
            this.lastLive = _data["lastLive"] ? new Date(_data["lastLive"].toString()) : <any>undefined;
            this.tvName = _data["tvName"];
            this.tvImage = _data["tvImage"];
        }
    }

    static fromJS(data: any): UserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["name"] = this.name;
        data["image"] = this.image;
        data["lastLive"] = this.lastLive ? this.lastLive.toISOString() : <any>undefined;
        data["tvName"] = this.tvName;
        data["tvImage"] = this.tvImage;
        return data; 
    }
}

/** 用户信息 */
export interface IUserDTO {
    /** ID */
    id?: number;
    /** 用户邮箱 */
    email?: string | undefined;
    /** 用户名 */
    name?: string | undefined;
    image?: string;
    /** 用户最后一次直播的时间 */
    lastLive?: Date | undefined;
    /** 直播间名称 */
    tvName?: string | undefined;
    /** 直播间封面 */
    tvImage?: string | undefined;
}

/** 描述用户核心信息的模型，用于获取或修改用户核心信息，用于修改用户信息时，必须总是附带EmailAuthCode， 要修改邮箱时，同时也要带上新邮箱的验证许可Key */
export class UserCore implements IUserCore {
    /** 邮箱， */
    email?: string | undefined;
    /** 用户名 */
    name?: string | undefined;
    /** 要修改用户信息时，必须同时提交Email的验证许可Key，否则修改会无效,从服务端获取时总是为空 */
    emailAuthCode!: string;
    /** 要修改的新邮箱，从服务端获取时总是为空 */
    newEmail?: string | undefined;
    /** 修改邮箱时，新邮箱的验证许可Key，从服务端获取时总是为空 */
    newEmailAuthCode?: string | undefined;
    /** 用户密码，从服务端获取时总是为空。 */
    password?: string | undefined;

    constructor(data?: IUserCore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.name = _data["name"];
            this.emailAuthCode = _data["emailAuthCode"];
            this.newEmail = _data["newEmail"];
            this.newEmailAuthCode = _data["newEmailAuthCode"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserCore {
        data = typeof data === 'object' ? data : {};
        let result = new UserCore();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["name"] = this.name;
        data["emailAuthCode"] = this.emailAuthCode;
        data["newEmail"] = this.newEmail;
        data["newEmailAuthCode"] = this.newEmailAuthCode;
        data["password"] = this.password;
        return data; 
    }
}

/** 描述用户核心信息的模型，用于获取或修改用户核心信息，用于修改用户信息时，必须总是附带EmailAuthCode， 要修改邮箱时，同时也要带上新邮箱的验证许可Key */
export interface IUserCore {
    /** 邮箱， */
    email?: string | undefined;
    /** 用户名 */
    name?: string | undefined;
    /** 要修改用户信息时，必须同时提交Email的验证许可Key，否则修改会无效,从服务端获取时总是为空 */
    emailAuthCode: string;
    /** 要修改的新邮箱，从服务端获取时总是为空 */
    newEmail?: string | undefined;
    /** 修改邮箱时，新邮箱的验证许可Key，从服务端获取时总是为空 */
    newEmailAuthCode?: string | undefined;
    /** 用户密码，从服务端获取时总是为空。 */
    password?: string | undefined;
}

export class InvalidModelDescription implements IInvalidModelDescription {
    /** 错误类型描述帮助URL */
    type?: string | undefined;
    /** 标题 */
    title?: string | undefined;
    /** 状态码，总是400 */
    status?: number;
    /** 错误跟踪码 */
    traceId?: string | undefined;
    /** 错误参数及其描述 */
    errors?: { [key: string]: string[]; } | undefined;

    constructor(data?: IInvalidModelDescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.type = "";
            this.title = "";
            this.status = 400;
            this.traceId = "";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"] !== undefined ? _data["type"] : "";
            this.title = _data["title"] !== undefined ? _data["title"] : "";
            this.status = _data["status"] !== undefined ? _data["status"] : 400;
            this.traceId = _data["traceId"] !== undefined ? _data["traceId"] : "";
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this.errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): InvalidModelDescription {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidModelDescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["traceId"] = this.traceId;
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = this.errors[key];
            }
        }
        return data; 
    }
}

export interface IInvalidModelDescription {
    /** 错误类型描述帮助URL */
    type?: string | undefined;
    /** 标题 */
    title?: string | undefined;
    /** 状态码，总是400 */
    status?: number;
    /** 错误跟踪码 */
    traceId?: string | undefined;
    /** 错误参数及其描述 */
    errors?: { [key: string]: string[]; } | undefined;
}

/** 用于描述服务器内部发生错误的响应模型 */
export class InternalErrorDescription implements IInternalErrorDescription {
    /** 总是“内部服务器错误。” */
    title?: string | undefined;
    /** 追踪ID，客户端应及时将此ID反馈回开发人员 */
    traceId?: string | undefined;

    constructor(data?: IInternalErrorDescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.title = "\u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef\u3002";
            this.traceId = "";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"] !== undefined ? _data["title"] : "\u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef\u3002";
            this.traceId = _data["traceId"] !== undefined ? _data["traceId"] : "";
        }
    }

    static fromJS(data: any): InternalErrorDescription {
        data = typeof data === 'object' ? data : {};
        let result = new InternalErrorDescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["traceId"] = this.traceId;
        return data; 
    }
}

/** 用于描述服务器内部发生错误的响应模型 */
export interface IInternalErrorDescription {
    /** 总是“内部服务器错误。” */
    title?: string | undefined;
    /** 追踪ID，客户端应及时将此ID反馈回开发人员 */
    traceId?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}